{
  "name": "Delphi-raspberrypi",
  "tagline": "Simple projects to show interaction between Delphi and Raspberry Pi",
  "body": "# Delphi-RaspberryPi\r\nSimple projects to show interaction between Delphi and Raspberry Pi\r\n\r\n[![Delphi version](https://img.shields.io/badge/delphi-10.1Berlin-red.svg)](https://github.com/JordiCorbilla/Delphi-RaspberryPi/releases/tag/1.0) [![node version](https://img.shields.io/badge/node.js-6.3.1-green.svg)](https://github.com/JordiCorbilla/Delphi-RaspberryPi/releases/tag/1.0)\r\n\r\n**License:** MIT License.\r\n\r\n## Setup\r\nCreate webapi folder\r\n\r\nCopy content of repository (src/RaspberryPi) into webapi folder\r\n\r\nrun the following commands:\r\n```\r\nsudo npm i\r\nnpm run build\r\nnpm start\r\n```\r\n![Screenshot](https://github.com/JordiCorbilla/Delphi-RaspberryPi/raw/master/webapi.png)\r\n\r\n## Web API in action\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar express = require('express');\r\nvar ping = require('ping');\r\nvar app = express();\r\nvar DEFAULT_PORT = 3000\r\n\r\n// configure Express to deliver index.html and any other static pages stored in the home directory\r\napp.use(express.static(__dirname));\r\n\r\n// Express route for incoming requests with method status/xxx where xxx is the machineName\r\napp.get('/status/:machinename', function (req, res) {\r\n    console.log('id = ' + req.params.machinename);\r\n    ping.sys.probe(req.params.machinename, function (isAlive) {\r\n        var msg = isAlive ? 'host ' + req.params.machinename + ' is alive' : 'host ' + req.params.machinename + ' is dead';\r\n        console.log(msg);\r\n        var s = [{host: isAlive ? 'alive' : 'dead'}];\r\n        res.status(200).send(s);\r\n    });\r\n});\r\n```\r\n\r\n![Screenshot](https://github.com/JordiCorbilla/Delphi-RaspberryPi/raw/master/Animation.gif)\r\n\r\n```pascal\r\n## Delphi App in action\r\n//Example - create list of nodes to scan:\r\n  listNodes := TList<TNode>.create();\r\n  listNodes.Add(TNode.Create('status/picontroller'));\r\n  listNodes.Add(TNode.Create('status/pi01'));\r\n  listNodes.Add(TNode.Create('status/pi02'));\r\n  listNodes.Add(TNode.Create('status/pi03'));\r\n\r\n//Use this list to loop through and request the correct node:\r\nprocedure TNodeThread.Execute;\r\nvar\r\n  node : TNode;\r\n  jValue: TJSONValue;\r\n  LJsonArr   : TJSONArray;\r\n  LJsonValue : TJSONValue;\r\n  LItem : TJSONValue;\r\n  status : string;\r\nbegin\r\n  Synchronize(\r\n    procedure ()\r\n    begin\r\n        FAniIndicator.Visible := true;\r\n        FAniIndicator.Enabled := true;\r\n    end\r\n  );\r\n\r\n  for node in FListNodes do\r\n  begin\r\n    FRequest.Resource := node.Action;\r\n    try\r\n      FRequest.Execute;\r\n      jValue := FResponse.JSONValue;\r\n      LJsonArr := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(jValue.ToString),0) as TJSONArray;\r\n      //Process results\r\n    except\r\n      on e : Exception do\r\n      begin\r\n        Synchronize(\r\n          procedure ()\r\n          begin\r\n              node.labelNode.Text := 'Timeout';\r\n              node.RoundRect.Fill.Color := node.ColorOff;\r\n          end\r\n        );\r\n      end;\r\n    end;\r\n  end;\r\n\r\n  Synchronize(\r\n    procedure ()\r\n    begin\r\n        FAniIndicator.Visible := false;\r\n        FAniIndicator.Enabled := false;\r\n    end\r\n  );\r\nend;\r\n```\r\n\r\n![Screenshot](https://github.com/JordiCorbilla/Delphi-RaspberryPi/raw/master/Animation2.gif)\r\n\r\n**Licence**\r\n-------\r\n\r\n    The MIT License (MIT)\r\n    \r\n    Copyright (c) 2016 Jordi Corbilla\r\n    \r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n    \r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n    \r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    THE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}