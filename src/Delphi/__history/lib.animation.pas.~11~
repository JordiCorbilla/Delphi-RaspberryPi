// Copyright (c) 2016, Jordi Corbilla
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// - Neither the name of this library nor the names of its contributors may be
// used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

unit lib.animation;

interface

uses
  System.Classes, REST.Client, lib.nodes, Generics.collections, FMX.StdCtrls, FMX.Objects;

type
  TNodeThread = class(TThread)
  private
    FListNodes : TList<TNode>;
    FRequest: TRESTRequest;
    FResponse: TRESTResponse;
    FlabelNode: TLabel;
    FRoundRect: TRoundRect;
  public
    constructor Create(request: TRESTRequest; response: TRESTResponse; nodes : TList<TNode>; labelNode: TLabel; RoundRect: TRoundRect); reintroduce;
  protected
    procedure Execute; override;
  end;

implementation

uses
  System.JSON, System.SysUtils;

constructor TNodeThread.Create(request: TRESTRequest; response: TRESTResponse; nodes : TList<TNode>);
begin
  inherited Create(True);
  FreeOnTerminate := True;
  FListNodes := nodes;
  FRequest := request;
  FResponse := response;
end;

procedure TNodeThread.Execute;
var
  node : TNode;
  jValue: TJSONValue;
begin
  for node in FListNodes do
  begin
    FRequest.Resource := node.Action;
    FRequest.Execute;
    jValue:=FResponse.JSONValue;
    if jValue.ToString.Contains('alive') then
    begin
      Label2.Text := 'Alive';
      RoundRect1.Fill.Color := node.ColorOn;
    end
    else
    begin
      Label2.Text := 'Dead';
      RoundRect1.Fill.Color := node.ColorOff;
    end;
  end;




  Synchronize(
    procedure ()
    begin
      //update main form
    end
  );

  //do processing
end;

end.
